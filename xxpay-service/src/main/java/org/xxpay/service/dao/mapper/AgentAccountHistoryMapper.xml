<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.xxpay.service.dao.mapper.AgentAccountHistoryMapper" >
  <resultMap id="BaseResultMap" type="org.xxpay.core.entity.AgentAccountHistory" >
    <id column="Id" property="id" jdbcType="BIGINT" />
    <result column="AgentId" property="agentId" jdbcType="BIGINT" />
    <result column="Amount" property="amount" jdbcType="BIGINT" />
    <result column="Balance" property="balance" jdbcType="BIGINT" />
    <result column="FundDirection" property="fundDirection" jdbcType="TINYINT" />
    <result column="BizType" property="bizType" jdbcType="TINYINT" />
    <result column="CreateTime" property="createTime" jdbcType="TIMESTAMP" />
    <result column="UpdateTime" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="AfterBalance" property="afterBalance" jdbcType="BIGINT" />
    <result column="BizItem" property="bizItem" jdbcType="VARCHAR" />
    <result column="OrderId" property="orderId" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    Id, AgentId, Amount, Balance, FundDirection, BizType, CreateTime, UpdateTime, AfterBalance,
    BizItem, OrderId
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="org.xxpay.core.entity.AgentAccountHistoryExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_agent_account_history
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limit != null" >
      <if test="offset != null" >
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null" >
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from t_agent_account_history
    where Id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from t_agent_account_history
    where Id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="org.xxpay.core.entity.AgentAccountHistoryExample" >
    delete from t_agent_account_history
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.xxpay.core.entity.AgentAccountHistory" >
    insert into t_agent_account_history (Id, AgentId, Amount, 
      Balance, FundDirection, BizType, 
      CreateTime, UpdateTime, AfterBalance,
      BizItem, OrderId)
    values (#{id,jdbcType=BIGINT}, #{agentId,jdbcType=BIGINT}, #{amount,jdbcType=BIGINT}, 
      #{balance,jdbcType=BIGINT}, #{fundDirection,jdbcType=TINYINT}, #{bizType,jdbcType=TINYINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{afterBalance,jdbcType=BIGINT},
      #{bizItem,jdbcType=VARCHAR}, #{orderId,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.xxpay.core.entity.AgentAccountHistory" >
    insert into t_agent_account_history
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        Id,
      </if>
      <if test="agentId != null" >
        AgentId,
      </if>
      <if test="amount != null" >
        Amount,
      </if>
      <if test="balance != null" >
        Balance,
      </if>
      <if test="fundDirection != null" >
        FundDirection,
      </if>
      <if test="bizType != null" >
        BizType,
      </if>
      <if test="createTime != null" >
        CreateTime,
      </if>
      <if test="updateTime != null" >
        UpdateTime,
      </if>
      <if test="afterBalance != null" >
        AfterBalance,
      </if>
      <if test="bizItem != null" >
        BizItem,
      </if>
      <if test="orderId != null" >
        OrderId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="agentId != null" >
        #{agentId,jdbcType=BIGINT},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=BIGINT},
      </if>
      <if test="balance != null" >
        #{balance,jdbcType=BIGINT},
      </if>
      <if test="fundDirection != null" >
        #{fundDirection,jdbcType=TINYINT},
      </if>
      <if test="bizType != null" >
        #{bizType,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="afterBalance != null" >
        #{afterBalance,jdbcType=BIGINT},
      </if>
      <if test="bizItem != null" >
        #{bizItem,jdbcType=VARCHAR},
      </if>
      <if test="orderId != null" >
        #{orderId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.xxpay.core.entity.AgentAccountHistoryExample" resultType="java.lang.Integer" >
    select count(*) from t_agent_account_history
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_agent_account_history
    <set >
      <if test="record.id != null" >
        Id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.agentId != null" >
        AgentId = #{record.agentId,jdbcType=BIGINT},
      </if>
      <if test="record.amount != null" >
        Amount = #{record.amount,jdbcType=BIGINT},
      </if>
      <if test="record.balance != null" >
        Balance = #{record.balance,jdbcType=BIGINT},
      </if>
      <if test="record.fundDirection != null" >
        FundDirection = #{record.fundDirection,jdbcType=TINYINT},
      </if>
      <if test="record.bizType != null" >
        BizType = #{record.bizType,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null" >
        CreateTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        UpdateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.afterBalance != null" >
        AfterBalance = #{record.afterBalance,jdbcType=BIGINT},
      </if>
      <if test="record.bizItem != null" >
        BizItem = #{record.bizItem,jdbcType=VARCHAR},
      </if>
      <if test="record.orderId != null" >
        OrderId = #{record.orderId,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_agent_account_history
    set Id = #{record.id,jdbcType=BIGINT},
      AgentId = #{record.agentId,jdbcType=BIGINT},
      Amount = #{record.amount,jdbcType=BIGINT},
      Balance = #{record.balance,jdbcType=BIGINT},
      FundDirection = #{record.fundDirection,jdbcType=TINYINT},
      BizType = #{record.bizType,jdbcType=TINYINT},
      CreateTime = #{record.createTime,jdbcType=TIMESTAMP},
      UpdateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      AfterBalance = #{record.afterBalance,jdbcType=BIGINT},
      BizItem = #{record.bizItem,jdbcType=VARCHAR},
      OrderId = #{record.orderId,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.xxpay.core.entity.AgentAccountHistory" >
    update t_agent_account_history
    <set >
      <if test="agentId != null" >
        AgentId = #{agentId,jdbcType=BIGINT},
      </if>
      <if test="amount != null" >
        Amount = #{amount,jdbcType=BIGINT},
      </if>
      <if test="balance != null" >
        Balance = #{balance,jdbcType=BIGINT},
      </if>
      <if test="fundDirection != null" >
        FundDirection = #{fundDirection,jdbcType=TINYINT},
      </if>
      <if test="bizType != null" >
        BizType = #{bizType,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        CreateTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        UpdateTime = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="afterBalance != null" >
        AfterBalance = #{afterBalance,jdbcType=BIGINT},
      </if>
      <if test="bizItem != null" >
        BizItem = #{bizItem,jdbcType=VARCHAR},
      </if>
      <if test="orderId != null" >
        OrderId = #{orderId,jdbcType=VARCHAR},
      </if>
    </set>
    where Id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.xxpay.core.entity.AgentAccountHistory" >
    update t_agent_account_history
    set AgentId = #{agentId,jdbcType=BIGINT},
      Amount = #{amount,jdbcType=BIGINT},
      Balance = #{balance,jdbcType=BIGINT},
      FundDirection = #{fundDirection,jdbcType=TINYINT},
      BizType = #{bizType,jdbcType=TINYINT},
      CreateTime = #{createTime,jdbcType=TIMESTAMP},
      UpdateTime = #{updateTime,jdbcType=TIMESTAMP},
      AfterBalance = #{afterBalance,jdbcType=BIGINT},
      BizItem = #{bizItem,jdbcType=VARCHAR},
      OrderId = #{orderId,jdbcType=VARCHAR}
    where Id = #{id,jdbcType=BIGINT}
  </update>

  <!-- 统计代理商分润 -->
  <select id="count4AgentProfit" resultType="java.util.Map" parameterType="java.util.Map" >
    SELECT COUNT(1) AS totalCount,
       SUM(Amount) AS totalProfit,
      BizItem As bizItem
    FROM t_agent_account_history
    WHERE BizType = 1
    <if test="agentId != null"> and AgentId = #{agentId} </if>
    GROUP BY BizItem;
  </select>
</mapper>